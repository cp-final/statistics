# -*- coding: utf-8 -*-
"""GV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mDVhPRQOVD_y7ZwVrbhko_T1zq18PgTx
"""

import numpy as np
import pandas as pd
from google.colab import drive
from datetime import datetime
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/dataset/test.csv')

df.sample(40)

df.head(20)

def get_stat(df):
  ans = [0, 0, 0, 0, 0,]
  listSegment = range(1, 6, 1)
  move = [[], [], [], [], []]
  subgamecategory = [[], [], [], [], []]
  os = [[], [], [], [], []]
  obl = [[], [], [], [], [], []]
  version = [[], [], [], [], []]
  for i, item in enumerate(df['segment']):
    if pd.isnull(item):
      continue
    item = int(item)   
    ans[item-1]+=1
    move[item-1].append(df['gamecategory'][i])
    obl[item-1].append(df['oblast'][i])
    os[item-1].append(df['os'][i])
    subgamecategory[item-1].append(df['subgamecategory'][i])
    version[item-1].append(df['osv'][i])
  game = []
  osi=[]
  ios = []
  veri = []
  obli = []
  for i in range(5):
    ans[i] = ans[i]/len(df['segment'])*100
    dat = pd.DataFrame(move[i]).value_counts()
    if len(dat)>0:
      game.append(dat[0]/len(move[i]))
    else:
      game.append(np.nan)
    dat = pd.DataFrame(os[i]).value_counts()
    if len(dat)>0:
      osi.append(dat[0]/len(os[i]))
      ios.append((len(os[i])-dat[0])/len(os[i]))
    else:
      osi.append(np.nan)
      ios.append(np.nan)
    dat = pd.DataFrame(obl[i]).value_counts()
    if len(dat)>0:
      ufa = str(dat.index.tolist()[0])
      ufa = ufa[2:len(ufa)-3]
      obli.append(ufa)
    else:
      obli.append(np.nan)
    dat = pd.DataFrame(version[i]).value_counts()
    if len(dat)>0:
      code = str(dat.index.tolist()[0])
      code = code[2:len(code)-3]
      veri.append(code)
    else:
      veri.append(np.nan)
  print(len(ans))
  print(len(listSegment))
  pas={
      'segment':listSegment,
      'Ð¡overage': ans,
      'oblast' : obli,
      'osv': veri,
      'Love Game': game,
      'Android':osi,
      'IOS': ios
  }
  df_ret = pd.DataFrame(pas)
  return df_ret

stat = get_stat(df)

stat.head()

stat.to_csv('state.csv')

# new_index = range(len(df))
# df = df.reindex(new_index)
# print(df.head())
# print(df.dropna())

#df = df.drop_duplicates(subset=['segment', 'oblast', 'city', 'os', 'osv'])
#new_index = range(len(df))
#df = df.reindex(new_index)
#df.head(50)